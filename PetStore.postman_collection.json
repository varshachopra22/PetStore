{
	"info": {
		"_postman_id": "9a5976f4-d3aa-437e-9bc5-bce8f43b609c",
		"name": "PetStore",
		"description": "PetStore is a collection of regression tests for Pet endpoints from PetStore Swagger - [https://petstore.swagger.io/#](https://petstore.swagger.io/#)\n\nThe regression covers the happy path, error validations and data validations.\n\nThis framework has been designed to cover all the important endpoints in CRUD operations. The top-down approach is used to have a good coverage of all the test scenarios. Similar tests are grouped together to maintain the readability. The environmental and collections variables are used so that any changes in future would be easy to encorporate.\n\nThe collection has api_key authorisation where the key is kept secret and is passed as environmental variable.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8220988",
		"_collection_link": "https://martian-trinity-920391.postman.co/workspace/martian-trinity-920391-Workspac~3419130f-2b52-46e4-8116-26334c82360d/collection/8220988-9a5976f4-d3aa-437e-9bc5-bce8f43b609c?action=share&source=collection_link&creator=8220988"
	},
	"item": [
		{
			"name": "AddPet",
			"item": [
				{
					"name": "AddPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"\r",
									"let id = pm.collectionVariables.get(\"idVal\");\r",
									"id = Math.floor((Math.random()*100000 +1));\r",
									"pm.collectionVariables.set(\"idVal\", id);\r",
									"// Stores the pet id in a collection variable\r",
									"var petId = responseData.id;\r",
									"pm.collectionVariables.set(\"petId\", petId);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Id field is a non-negative integer\", function () {    \r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Category object contains id and name fields\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.category).to.exist;\r",
									"    pm.expect(responseData.category.id).to.exist;\r",
									"    pm.expect(responseData.category.name).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"PhotoUrls must be a non-empty array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.photoUrls).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Tags array is present and contains at least one tag\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.tags).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"console.log(petId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{idVal}},\r\n    \"category\": {\r\n    \"id\":123,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"file://C:/Users/Administrator/Pictures/oragame.PNG\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 1001,\r\n      \"name\": \"Tag1001\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPet-nullData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an id property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a photoUrls property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('photoUrls');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a tags property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('tags');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{idVal}},\r\n  \"category\": null,\r\n  \"name\": null,\r\n  \"photoUrls\": [],\r\n    \"tags\": [],\r\n    \"status\": null\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPet-500err-InvaId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{idVal}},\r\n  \"category\": {\r\n    \"id\": -8,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"file:///C:/Users/Administrator/Pictures/oragame.PNG\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": \"@#$\",\r\n      \"name\": \"Tag1001\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPet-400errBadReq",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{idVal}},,\r\n  \"category\": {\r\n    \"id\":111,\r\n    \"name\": \"CAT101\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [ \r\n    \"file:///C:/Users/Administrator/Pictures/oragame.PNG\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 1001,\r\n      \"name\": \"Tag1001\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				}
			],
			"description": "The AddPet Endpoints is to create data and validate the data created.\n\nTest cases covered were:\n\n- create data with all the fields\n    \n- null data\n    \n- id with special characters\n- bad request body"
		},
		{
			"name": "UploadImage",
			"item": [
				{
					"name": "uploadFile",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalMetadata",
									"value": "dmfnbas sjfb",
									"type": "text"
								},
								{
									"key": "file",
									"contentType": "image/png",
									"type": "file",
									"src": "/C:/Users/Administrator/Pictures/dog.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}",
								"uploadImage"
							]
						}
					},
					"response": []
				},
				{
					"name": "uploadFile-noMetaandFile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}",
								"uploadImage"
							]
						}
					},
					"response": []
				},
				{
					"name": "uploadFile-noFile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalMetadata",
									"value": "vdfmnvmdvas jdbf",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}",
								"uploadImage"
							]
						}
					},
					"response": []
				},
				{
					"name": "uploadFile-noMetaData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/Administrator/Pictures/image.png"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}",
								"uploadImage"
							]
						}
					},
					"response": []
				}
			],
			"description": "UploadImage is the endpoint where an image can be uploaded as form-data.\n\nThe test cases covered are:\n\n- Uploading image\n    \n- null values to metadata and file\n    \n- no file path given\n    \n- no metadata given"
		},
		{
			"name": "RetrievePet",
			"item": [
				{
					"name": "PetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a valid JSON object\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('category');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('photoUrls');\r",
									"    pm.expect(jsonData).to.have.property('tags');\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PetNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has message Pet not found\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql('Pet not found')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "",
									"type": "string"
								},
								{
									"key": "value",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petid"
							],
							"variable": [
								{
									"key": "petid",
									"value": "-2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PetByStatus-pending",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Each pet object has the status pending\", function () {\r",
									"    pm.response.json().forEach(function(pet) {\r",
									"        pm.expect(pet).to.have.property('id');\r",
									"        pm.expect(pet).to.have.property('status').to.eql(\"pending\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=pending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "pending"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PetByStatus-available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Each pet object has the status available\", function () {\r",
									"    pm.response.json().forEach(function(pet) {\r",
									"        pm.expect(pet).to.have.property('id');\r",
									"        pm.expect(pet).to.have.property('status').to.eql(\"available\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PetByStatus-sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Each pet object has the status sold\", function () {\r",
									"    pm.response.json().forEach(function(pet) {\r",
									"        pm.expect(pet).to.have.property('id');\r",
									"        pm.expect(pet).to.have.property('status').to.eql(\"sold\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=sold",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "sold"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "RetrievePet endpoints is for retrieving data\n\nTest cases covered are:\n\n- Retrieving Pet by id\n    \n- The error when pet is not found\n    \n\nOther test cases covered are\n\n- retrieving or filtering pets by status"
		},
		{
			"name": "UpdatePet",
			"item": [
				{
					"name": "updatePet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John",
									"type": "text"
								},
								{
									"key": "status",
									"value": "pending",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePet-reqBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 66746,\r\n    \"category\": {\r\n        \"id\": 123,\r\n        \"name\": \"string\"\r\n    },\r\n    \"name\": \"birdie\",\r\n    \"photoUrls\": [\r\n        \"file://C:/Users/Administrator/Pictures/oragame.PNG\"\r\n    ],\r\n    \"tags\": [\r\n        {\r\n            \"id\": 1001,\r\n            \"name\": \"Tag1001\"\r\n        }\r\n    ],\r\n    \"status\": \"pending\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePet-invalidStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n    \"category\": {\r\n        \"id\": 0,\r\n        \"name\": \"string\"\r\n    },\r\n    \"name\": \"doggie\",\r\n    \"photoUrls\": [\r\n        \"string\"\r\n    ],\r\n    \"tags\": [\r\n        {\r\n        \"id\": 0,\r\n        \"name\": \"string\"\r\n        }\r\n    ],\r\n    \"status\": \"%^&\"\r\n    }"
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petid"
							],
							"variable": [
								{
									"key": "petid",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePet-invalidName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n    \"category\": {\r\n        \"id\": 0,\r\n        \"name\": 52478\r\n    },\r\n    \"name\": \"doggie\",\r\n    \"photoUrls\": [\r\n        \"string\"\r\n    ],\r\n    \"tags\": [\r\n        {\r\n        \"id\": 0,\r\n        \"name\": \"string\"\r\n        }\r\n    ],\r\n    \"status\": \"available\"\r\n    }"
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petid"
							],
							"variable": [
								{
									"key": "petid",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePet-invalidId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"pending\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petid"
							],
							"variable": [
								{
									"key": "petid",
									"value": "$%"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "UpdatePet endpoints is to update the data.\n\nTest cases covered are:\n\n- find Pet by id and update the data (name and status)\n    \n\nAlso covered the test cases where the updated data is passed in request body and some negative scenarios like\n\n- status data validation\n    \n- name data validation\n    \n- and passing an invalid id"
		},
		{
			"name": "DeletePet",
			"item": [
				{
					"name": "deletePet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePet-notFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with code, type, and message properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'type', 'message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has message Pet not found\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql('Pet not found')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "",
									"type": "string"
								},
								{
									"key": "value",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePet-invalidId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "petstoreSwagger@test123",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/:petid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petid"
							],
							"variable": [
								{
									"key": "petid",
									"value": "%"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "DeletePet endpoints delete the data. Also covered the testcases for Pet not found and invalid id passed."
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{api_key1}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "api_key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					"pm.test(\"Response time is less than 2s\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"key": "petId",
			"value": "",
			"type": "string"
		},
		{
			"key": "idVal",
			"value": ""
		}
	]
}